<UserControl x:Class="NekoPuppet.NodeGraph"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:NekoPuppet"
             
             xmlns:FunctionalNetworkUI="clr-namespace:FunctionalNetworkUI;assembly=FunctionalNetworkUI" 
             xmlns:FunctionalNetworkModel="clr-namespace:FunctionalNetworkModel;assembly=FunctionalNetworkModel"
             xmlns:ZoomAndPan="clr-namespace:ZoomAndPan;assembly=ZoomAndPan"
             xmlns:ac="clr-namespace:AdornedControl;assembly=AdornedControl"
             
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             
             mc:Ignorable="d" 
             d:DesignHeight="100" d:DesignWidth="100"
             
             Loaded="NodeGraph_Loaded"
             FocusManager.FocusedElement="{Binding ElementName=networkControl}"
             >

    <UserControl.Resources>

        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- 
                Merge in the resource dictionary that is shared between the main window and the overview window.
                -->
                <ResourceDictionary 
                    Source="SharedVisualTemplates.xaml"
                    />

            </ResourceDictionary.MergedDictionaries>

            <!-- UI commands. -->

            <RoutedUICommand x:Key="Commands.DeleteSelectedNodes" />
            <!--<RoutedUICommand x:Key="Commands.CreateNode" />-->
            <RoutedUICommand x:Key="Commands.DeleteNode" />
            <RoutedUICommand x:Key="Commands.DeleteConnection" />
            <RoutedUICommand x:Key="Commands.DeleteExecutionConnection" />
            <RoutedUICommand x:Key="Commands.ZoomOut" />
            <RoutedUICommand x:Key="Commands.ZoomIn" />
            <RoutedUICommand x:Key="Commands.JumpBackToPrevZoom" />
            <RoutedUICommand x:Key="Commands.FitContent" />
            <RoutedUICommand x:Key="Commands.Fill" />
            <RoutedUICommand x:Key="Commands.OneHundredPercent" />

            <!-- 
            This converts from a scale value to a percentage value.
            It is used to convert the value of 'ContentScale' to the percentage zoom level that is displayed in the UI.
            -->
            <local:ScaleToPercentConverter 
                x:Key="scaleToPercentConverter" 
                />

            <!-- 
            This graphic is used to indicate that a connection cannot be made between two particular connectors.        
            -->
            <DataTemplate DataType="{x:Type local:ConnectionBadIndicator}">
                <Grid
                    Width="80"
                    >
                    <Image 
                        Width="32"
                        Height="32"
                        Source="Resources/block_16.png"
                        HorizontalAlignment="Right"
                        />
                </Grid>
            </DataTemplate>

            <!-- 
            This graphic is used to indicate that a connection can be made between two particular connectors.        
            -->
            <DataTemplate DataType="{x:Type local:ConnectionOkIndicator}">
                <Grid
                    Width="80"
                    >
                    <Image 
                        Width="32"
                        Height="32"
                        Source="Resources/tick_16.png"
                        HorizontalAlignment="Right"
                        />
                </Grid>
            </DataTemplate>

            <!-- 
            Define the visual style for a 'ExecutionConnectorItem'.
            -->
            <Style 
                TargetType="{x:Type FunctionalNetworkUI:ExecutionConnectorItem}"
                >
                <!-- 
                Data-binding for the connector hotspot.
                ExecutionConnectorItem automatically computes its center points and assings this value
                to the 'Hotspot' property.  This data-binding then 'pushes' the value into the application
                view-model.
                -->
                <Setter 
                    Property="Hotspot"
                    Value="{Binding Hotspot, Mode=OneWayToSource}"
                    />

                <!-- The visual template. -->
                <Setter 
                    Property="Template"
                    >
                    <Setter.Value>
                        <ControlTemplate 
                            TargetType="{x:Type FunctionalNetworkUI:ExecutionConnectorItem}"
                            >
                            <!-- The visual for the connector. -->
                            <Rectangle
                                Stroke="{StaticResource nodeBorderBrush}"
                                Fill="{StaticResource connectorBackgroundBrush}"
                                />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <!-- 
            Define the visual style for a 'ConnectorItem'.
            -->
            <Style 
                TargetType="{x:Type FunctionalNetworkUI:ConnectorItem}"
                >
                <!-- 
                Data-binding for the connector hotspot.
                ConnectorItem automatically computes its center points and assings this value
                to the 'Hotspot' property.  This data-binding then 'pushes' the value into the application
                view-model.
                -->
                <Setter 
                    Property="Hotspot"
                    Value="{Binding Hotspot, Mode=OneWayToSource}"
                    />

                <!-- The visual template. -->
                <Setter 
                    Property="Template"
                    >
                    <Setter.Value>
                        <ControlTemplate 
                            TargetType="{x:Type FunctionalNetworkUI:ConnectorItem}"
                            >
                            <!-- The visual for the connector. -->
                            <Ellipse
                                Stroke="{StaticResource nodeBorderBrush}"
                                Fill="{StaticResource connectorBackgroundBrush}"
                                />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- 
            Template for the button that is used to delete nodes and connections in the graph.
            This button is displayed in an adorner when the user hovers the mouse over a node or connection.
            -->
            <ControlTemplate 
                x:Key="deleteButtonTemplate"
                TargetType="{x:Type Button}"
                >
                <Grid
                    x:Name="grid"
                    >
                    <Grid.RenderTransform>
                        <ScaleTransform
                            ScaleX="1"
                            ScaleY="1"
                            CenterX="10"
                            CenterY="10"
                            />
                    </Grid.RenderTransform>
                    <Ellipse
                        x:Name="shadow"
                        VerticalAlignment="Stretch"
                        HorizontalAlignment="Stretch"
                        Fill="Gray"
                        >
                        <Ellipse.RenderTransform>
                            <TranslateTransform
                                X="1.5"
                                Y="1.5"
                                />
                        </Ellipse.RenderTransform>
                    </Ellipse>
                    <Ellipse
                        x:Name="ellipse"
                        Stroke="Black"
                        VerticalAlignment="Stretch"
                        HorizontalAlignment="Stretch"
                        Fill="White"
                        />
                    <Image
                        Source="Resources\scissors.png" 
                        Margin="2"
                        />
                </Grid>
                <ControlTemplate.Triggers>
                    <EventTrigger
                        RoutedEvent="Mouse.MouseEnter"
                        >
                        <!-- 
                        Make the 'delete connection button' larger when the mouse 
                        cursor is hovered over it.
                        -->
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleX"
                                    To="1.3"
                                    Duration="0:0:0.25"
                                    />
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleY"
                                    To="1.3"
                                    Duration="0:0:0.25"
                                    />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>

                    <EventTrigger
                        RoutedEvent="Mouse.MouseLeave"
                        >
                        <!-- 
                        Return the 'delete connection button' to normal size when the mouse
                        cursor is moved away.
                        -->
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleX"
                                    To="1"
                                    Duration="0:0:0.05"
                                    />
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleY"
                                    To="1"
                                    Duration="0:0:0.05"
                                    />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </ControlTemplate.Triggers>

            </ControlTemplate>

            <!-- 
            Data-template for ConectionViewModel.
            
            Note that the 'Start' and 'End' of the arrow are bound to 'SourceConnectorHotspot' and 'DestConnectorHotspot' in 
            the view-model.

            In this sample a curved arrow represents connections between nodes.
            -->
            <DataTemplate
                DataType="{x:Type FunctionalNetworkModel:ExecutionConnectionViewModel}"
                >

                <!-- 
                An adorned control is used, to represent the connection. 
                When the user hovers the mouse cursor over the connection, the 
                'delete connection' adorner pops up and allows them to delete the connection.
                -->
                <ac:AdornedControl
                    HorizontalAdornerPlacement="Mouse"
                    VerticalAdornerPlacement="Mouse"
                    IsMouseOverShowEnabled="{Binding ElementName=networkControl, Path=IsNotDragging}"
                    >

                    <!-- The connection is represented by a curved arrow. -->
                    <local:CurvedArrow
                        Stroke="{StaticResource connectionBrush}"
                        StrokeThickness="6"
                        ArrowHeadLength="10.0"
                        Fill="{StaticResource connectionBrush}"
                        Points="{Binding Points}"
                        />

                    <ac:AdornedControl.AdornerContent>

                        <!-- 
                        This is the adorner that pops up when the user hovers the mouse over the connection.
                        It displays a button that the user can click to delete the connection.
                        -->
                        <Canvas
                            x:Name="executionConnectionAdornerCanvas"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top"
                            Width="30"
                            Height="30"
                            >
                            <Line
                                X1="0"
                                Y1="30"
                                X2="15"
                                Y2="15"
                                Stroke="Black"
                                StrokeThickness="1"
                                />
                            <Button
                                x:Name="deleteExecutionConnectionButton"
                                Canvas.Left="10"
                                Canvas.Top="0"
                                Width="20"
                                Height="20"
                                Cursor="Hand"
                                Focusable="False"
                                Command="{StaticResource Commands.DeleteExecutionConnection}"
                                CommandParameter="{Binding}"
                                Template="{StaticResource deleteButtonTemplate}"
                                />
                        </Canvas>
                    </ac:AdornedControl.AdornerContent>
                </ac:AdornedControl>
            </DataTemplate>
            
            <!-- 
            Data-template for ConectionViewModel.
            
            Note that the 'Start' and 'End' of the arrow are bound to 'SourceConnectorHotspot' and 'DestConnectorHotspot' in 
            the view-model.

            In this sample a curved arrow represents connections between nodes.
            -->
            <DataTemplate
                DataType="{x:Type FunctionalNetworkModel:ConnectionViewModel}"
                >

                <!-- 
                An adorned control is used, to represent the connection. 
                When the user hovers the mouse cursor over the connection, the 
                'delete connection' adorner pops up and allows them to delete the connection.
                -->
                <ac:AdornedControl
                    HorizontalAdornerPlacement="Mouse"
                    VerticalAdornerPlacement="Mouse"
                    IsMouseOverShowEnabled="{Binding ElementName=networkControl, Path=IsNotDragging}"
                    >

                    <!-- The connection is represented by a curved arrow. -->
                    <local:CurvedArrow
                        Stroke="{StaticResource connectionBrush}"
                        StrokeThickness="2"
                        Fill="{StaticResource connectionBrush}"
                        Points="{Binding Points}"
                        />

                    <ac:AdornedControl.AdornerContent>

                        <!-- 
                        This is the adorner that pops up when the user hovers the mouse over the connection.
                        It displays a button that the user can click to delete the connection.
                        -->
                        <Canvas
                            x:Name="connectionAdornerCanvas"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top"
                            Width="1000"
                            Height="1000"
                            >
                            <Line
                                X1="0"
                                Y1="30"
                                X2="15"
                                Y2="15"
                                Stroke="Black"
                                StrokeThickness="1"
                                />
                            <Button
                                x:Name="deleteConnectionButton"
                                Canvas.Left="10"
                                Canvas.Top="0"
                                Width="20"
                                Height="20"
                                Cursor="Hand"
                                Focusable="False"
                                Command="{StaticResource Commands.DeleteConnection}"
                                CommandParameter="{Binding}"
                                Template="{StaticResource deleteButtonTemplate}"
                                />
                        </Canvas>
                    </ac:AdornedControl.AdornerContent>
                </ac:AdornedControl>
            </DataTemplate>

            <!-- Define a data-template for the 'NodeViewModel' class. -->
            <DataTemplate
                DataType="{x:Type FunctionalNetworkModel:NodeViewModel}"
                >

                <!-- 
                An adorned control is used, to represent the node. 
                When the user hovers the mouse cursor over the node, the 
                'delete node' adorner pops up and allows them to delete the node.
                -->
                <ac:AdornedControl
                    HorizontalAdornerPlacement="Outside"
                    VerticalAdornerPlacement="Outside"
                    AdornerOffsetX="-12"
                    AdornerOffsetY="8"
                    IsMouseOverShowEnabled="{Binding ElementName=networkControl, Path=IsNotDragging}"
                    >

                    <!-- The margin has been selected so that the selection rect nicely covers the entire node. -->

                    <Grid
                        MinWidth="120"
                        Margin="10,6,10,6"
                        SizeChanged="Node_SizeChanged"
                        >

                        <!-- This rectangle is the main visual for the node. -->

                        <Rectangle
                            Stroke="{StaticResource nodeBorderBrush}"
                            StrokeThickness="1.3"
                            RadiusX="4"
                            RadiusY="4"
                            Fill="{StaticResource nodeFillBrush}"
                            />

                        <!-- 
                        This grid contains the node's connectors.
                        The margin is negative so that the connectors overlap the body of the node and it's selection border.
                        -->
                        <Grid
                            Margin="-6,4,-6,4"
                            >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" MinWidth="10" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <!-- spacer -->
                                <RowDefinition Height="2" />
                                <RowDefinition Height="Auto" />
                                <!-- spacer -->
                                <RowDefinition Height="2" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <!-- The name of the node. -->
                            <TextBlock
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                Grid.Row="0"
                                Text="{Binding Name}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                />

                            <!-- The type of the node. -->
                            <TextBlock
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                Grid.Row="1"
                                Text="{Binding Path=Type, StringFormat=[\{0\}]}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                />
                            
                            <!-- The notes of the node. -->
                            <TextBlock
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                Grid.Row="2"
                                Text="{Binding Note}"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Margin="8,0"
                                />

                            <!-- Displays the node's input execution connectors. -->
                            <ItemsControl
                                Grid.Column="0"
                                Grid.Row="4"
                                ItemsSource="{Binding InputExecutionConnectors}"
                                ItemTemplate="{StaticResource inputExecutionConnectorTemplate}"
                                Focusable="False"
                                />

                            <!-- Displays the node's output execution connectors. -->
                            <ItemsControl
                                Grid.Column="2"
                                Grid.Row="4"
                                ItemsSource="{Binding OutputExecutionConnectors}"
                                ItemTemplate="{StaticResource outputExecutionConnectorTemplate}"
                                Focusable="False"
                                />
                            
                            <!-- Displays the node's input connectors. -->
                            <ItemsControl
                                Grid.Column="0"
                                Grid.Row="6"
                                ItemsSource="{Binding InputConnectors}"
                                ItemTemplate="{StaticResource inputConnectorTemplate}"
                                Focusable="False"
                                />

                            <!-- Displays the node's output connectors. -->
                            <ItemsControl
                                Grid.Column="2"
                                Grid.Row="6"
                                ItemsSource="{Binding OutputConnectors}"
                                ItemTemplate="{StaticResource outputConnectorTemplate}"
                                Focusable="False"
                                />
                        </Grid>
                    </Grid>

                    <ac:AdornedControl.AdornerContent>

                        <!-- 
                        This is the adorner that pops up when the user hovers the mouse over the node.
                        It displays a button that the user can click to delete the node.
                        -->
                        <Canvas
                            x:Name="nodeAdornerCanvas"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top"
                            Width="30"
                            Height="30"
                            >
                            <Line
                                X1="0"
                                Y1="30"
                                X2="15"
                                Y2="15"
                                Stroke="Black"
                                StrokeThickness="1"
                                />
                            <Button
                                x:Name="deleteNodeButton"
                                Canvas.Left="10"
                                Canvas.Top="0"
                                Width="20"
                                Height="20"
                                Cursor="Hand"
                                Focusable="False"
                                Command="{StaticResource Commands.DeleteNode}"
                                CommandParameter="{Binding}"
                                Template="{StaticResource deleteButtonTemplate}"
                                />
                        </Canvas>
                    </ac:AdornedControl.AdornerContent>
                </ac:AdornedControl>
            </DataTemplate>

        </ResourceDictionary>

    </UserControl.Resources>

    <UserControl.InputBindings>

        <!-- Bind input to commands. -->

        <KeyBinding
			Key="Del"
			Command="{StaticResource Commands.DeleteSelectedNodes}"
			/>
        <KeyBinding
			Key="Minus"
			Command="{StaticResource Commands.ZoomOut}"
			/>
        <KeyBinding
			Key="Plus"
			Command="{StaticResource Commands.ZoomIn}"
			/>
        <KeyBinding
			Key="Backspace"
			Command="{StaticResource Commands.JumpBackToPrevZoom}"
			/>
        <KeyBinding
			Key="Space"
			Command="{StaticResource Commands.FitContent}"
			/>

    </UserControl.InputBindings>

    <UserControl.CommandBindings>

        <!-- Bind commands to event handlers.-->

        <CommandBinding 
            Command="{StaticResource Commands.DeleteSelectedNodes}" 
            Executed="DeleteSelectedNodes_Executed" 
            />
        <!--<CommandBinding 
            Command="{StaticResource Commands.CreateNode}" 
            Executed="CreateNode_Executed" 
            />-->
        <CommandBinding 
            Command="{StaticResource Commands.DeleteNode}" 
            Executed="DeleteNode_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.DeleteConnection}" 
            Executed="DeleteConnection_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.DeleteExecutionConnection}" 
            Executed="DeleteExecutionConnection_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.ZoomOut}" 
            Executed="ZoomOut_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.ZoomIn}" 
            Executed="ZoomIn_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.JumpBackToPrevZoom}" 
            Executed="JumpBackToPrevZoom_Executed" 
            CanExecute="JumpBackToPrevZoom_CanExecuted"
            />
        <CommandBinding 
            Command="{StaticResource Commands.FitContent}" 
            Executed="FitContent_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.Fill}" 
            Executed="Fill_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.OneHundredPercent}" 
            Executed="OneHundredPercent_Executed" 
            />

    </UserControl.CommandBindings>

    <UserControl.ContextMenu>

        <ContextMenu
            Name="cmMenu"
            >

            <!-- Clicking this menu item creates a new node. -->

            <MenuItem
                Header="Create Node"
                Name="miCreateNode"
                ToolTip="Creates a new node"
                />

            <!--Command="{StaticResource Commands.CreateNode}"-->

            <Separator />

            <MenuItem
                Header="Fit"
                Command="{StaticResource Commands.FitContent}"
                ToolTip="Fit selected nodes to the viewport, when nothing is selected fits all nodes to the viewport"
                />
            <MenuItem
                Header="Fill"
                Command="{StaticResource Commands.Fill}"
                ToolTip="Fit the entire content area to the viewport"
                />
            <MenuItem
                Header="100%"
                Command="{StaticResource Commands.OneHundredPercent}"
                ToolTip="Scale the content to 100%"
                />
            <MenuItem
                Header="Previous Zoom"
                Command="{StaticResource Commands.JumpBackToPrevZoom}"
                ToolTip="Return to the previous zoom level"
                />

            <Separator />

            <MenuItem
                Header="Zoom Out"
                Command="{StaticResource Commands.ZoomOut}"
                ToolTip="Zooms out from the canvas"
                />
            <MenuItem
                    Header="Zoom In"
                    Command="{StaticResource Commands.ZoomOut}"
                    ToolTip="Zooms in on the canvas"
                    />

        </ContextMenu>
    </UserControl.ContextMenu>

    <UserControl.DataContext>
        <local:NodeGraphViewModel
            ContentHeight="5000"
            ContentWidth="5000"
            />
    </UserControl.DataContext>

    <Grid>
        <!-- 
        The ScrollViewer displays scrollbars when the content is too big to fit in the viewport. 
        Focusable is set to False because it is only that NetworkView that I want to be focusable.
        -->
        <ScrollViewer
            CanContentScroll="True"
            VerticalScrollBarVisibility="Visible"
            HorizontalScrollBarVisibility="Visible"
            Focusable="False"
            >

            <!-- 
            The ZoomAndPanControl displays the NetworkView as its content.
            We can use the mouse to zoom and pan about the NetworkView.
            -->
            <ZoomAndPan:ZoomAndPanControl
                x:Name="zoomAndPanControl"
                ContentScale="{Binding ContentScale, Mode=TwoWay}"
                ContentOffsetX="{Binding ContentOffsetX, Mode=TwoWay}"
                ContentOffsetY="{Binding ContentOffsetY, Mode=TwoWay}"
                ContentViewportWidth="{Binding ContentViewportWidth, Mode=OneWayToSource}"
                ContentViewportHeight="{Binding ContentViewportHeight, Mode=OneWayToSource}"
                Background="LightGray"
                Focusable="False"
                >
                <!--
                We need to nest our NetworkView in an AdornerDecorator so that adorners work correct when
                we zoom in and out using the ZoomAndPanControl
                -->
                <AdornerDecorator>
                    <!--
                    This grid specifies the size of the ZoomAndPanControl's content.
                    It wraps up both the NetworkView and drag-zooming Canvas.
                    -->
                    <Grid
                        Width="{Binding ContentWidth}"
                        Height="{Binding ContentHeight}"
                        >

                        <!-- In this sample the NetworkView is the content displayed by the ZoomAndPanControl. -->

                        <FunctionalNetworkUI:NetworkView
                            x:Name="networkControl"
                            
                            NodesSource="{Binding Network.Nodes}"
                            ConnectionsSource="{Binding Path=Network.Connections}"
                            ExecutionConnectionsSource="{Binding Path=Network.ExecutionConnections}"
                            
                            ConnectionDragStarted="networkControl_ConnectionDragStarted"
                            QueryConnectionFeedback="networkControl_QueryConnectionFeedback"
                            ConnectionDragging="networkControl_ConnectionDragging"                            
                            ConnectionDragCompleted="networkControl_ConnectionDragCompleted"
                            
                            ExecutionConnectionDragStarted="networkControl_ExecutionConnectionDragStarted"
                            QueryExecutionConnectionFeedback="networkControl_QueryExecutionConnectionFeedback"
                            ExecutionConnectionDragging="networkControl_ExecutionConnectionDragging"
                            ExecutionConnectionDragCompleted="networkControl_ExecutionConnectionDragCompleted"
                            
                            NodeDoubleClick="networkControl_NodeDoubleClick"
                            
                            MouseDown="networkControl_MouseDown"
                            MouseUp="networkControl_MouseUp"
                            MouseMove="networkControl_MouseMove"
                            MouseWheel="networkControl_MouseWheel"
                            />

                        <!--
                        This Canvas and Border are used as a very simple way to render a drag rectangle that the user
                        uses to specify an area to zoom in on.
                        -->
                        <Canvas
                            x:Name="dragZoomCanvas"
                            Visibility="Collapsed"
                            >
                            <Border 
                                x:Name="dragZoomBorder"
                                BorderBrush="Black"
                                BorderThickness="1"
                                Background="Silver"
                                CornerRadius="1"
                                Opacity="0"
                                />
                        </Canvas>
                    </Grid>
                </AdornerDecorator>
            </ZoomAndPan:ZoomAndPanControl>
        </ScrollViewer>

    </Grid>
</UserControl>
